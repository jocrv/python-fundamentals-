p-4 

Introduction
You may have heard that object orientation is one of the subjects you can't get away from when learning any programming language. But not quite! Remember that there are languages ​​with other paradigms which will never be object-oriented.

In fact, most of the well-known and widely used languages ​​on the market have this character. And Python is one of them.

As with other aspects of the language, creating and using objects is quite simple in Python. However, it is very important that you pick up the knowledge gained from object orientation from other languages.

In this class, we will define some important concepts such as inheritance, abstraction, encapsulation, and polymorphism.

Come on?

Goals
Explain how object orientation in Python works.

Create scripts with objects in this language.

Use objects in Python.


INTRO
GOALS
CREDITS
PRINT OUT
Object orientation

Object orientation is a programming paradigm that is widely used these days by major languages. And Python is among them.

It is very common to find programmers who repeat code from the internet without even knowing what they are doing or the theory behind the resource used. Therefore, knowing the basics of languages ​​is extremely important to generate more effective and reusable code.

Before delving into the codes, let's remember the pillars that support object orientation. Are they:

inheritance abstraction encapsulation
polymorphism

object orientation
HERITAGE
Mechanism more related to code reuse within object orientation – a big advantage of this kind of paradigm.

Example

A child inherits characteristics from his parents, these inherit from his grandparents, the grandparents of his great-grandparents, and so on. In object orientation, an object below a hierarchy inherits characteristics from all objects above it.
ABSTRACTION
The problem for any software engineer is to transport to the computational world a view of reality according to the paradigm he chose to develop the project.

In the case of object-oriented, abstraction involves three issues:

1. Every object must have an identity.
2. Every object has properties, that is, the elements that define it.
3. Every object has methods or actions that it performs.

Therefore, we can abstract elements from the real world and convert them into objects to be implemented in some object-oriented language.
ENCAPSULATION
Pillar that hides the properties of an object, making the program more secure and showing only the actions that the object can perform.

Basically, when we use private properties related to accessor methods (get and set), we avoid direct access to the object's property, increasing application security.

Example

When we watch TV, we are only concerned with the act of turning the device on or off, which occurs internally. But the circuits involved within television are neither of our knowledge nor of our interest.
POLYMORPHISM
Child objects inherit attributes and methods from their parents, but in some situations it is important that actions for the same method are different. Polymorphism occurs when there is a change in the inner workings of a method inherited from a parent object.

Example

Let's get back to thinking about how TV works. The television can be an object that inherits from a class called an appliance. We know that every appliance can be turned on or off, right? Considering two objects (a TV and a washing machine), they both have the on and off method, but the way they do it is multiple (polymorphism).
The four pillars are fundamental to understanding the object-oriented paradigm. Each language implements them differently, but overall the result is the same.

Heads up

Although the concepts don't change, there are specific details that involve inheritance and polymorphism in some languages.

Python Functions

In object-oriented, we need to write methods in classes, which are very similar to functions and procedures in structured programming.

So, before we start writing object-oriented programs, we need to learn how to write functions in Python.

So let's show a function defined in this language:


1 def printme (str):
2 "This function will print: "
3 print str
4 return


Can you figure out what it's for?



Reflect on this as we explain its structure:


1. Every function in Python starts with the def command.


2. After the def there is the function name


3. Next, the parameter list appears, which may be empty, but parentheses are mandatory.


4. Following this list are a colon (“:”).


5. Notice that there is an indentation on lines 2, 3, and 4. Any code that is indented will be part of the function body. Indentation is very important in defining functions. So be careful when typing command blocks.


6. Every function ends with a return statement, which may or may not be followed by a return variable.


The function was defined in the previous example, but how to execute a user-defined one?

Remember, we've already learned how to do this: when we use print() or input(), we're actually calling built-in Python functions—also called a build-in.

As an example, let's use IDLE. Look at the picture:
>>> def printme(str):
print("This function will print: ")
print(str)
return 

>>> printme("MargarethThatcheris110%sexy")      /// call this function
This function will print:
MargarethThatcheris110
>>>

As we can see here, calling the function is not much different than in other languages.



We'll cover functions again and in more detail in Lecture 9. Since our current goal is to learn object orientation, what we've studied so far is sufficient.

Know more

Perhaps, you found the example string strange, but its story is quite interesting. If you want to know more about it, watch the video Edward Snowden on Passwords: last week tonight with John Oliver.

Python Classes

In Python, creating a class is also pretty simple. Note its syntax:

class ClassName:
        'Class Documentation String (Optional)'
        class_body


Let's look at an example:


1 class Employee:
2 'Base Class for Employees'
3 counter = 0
4
5 def __init__ (self, name, salary):
6 self.name = name
7 self.salary = salary
8 Employee.accountant += 1
9
10 def display_counter (self):
11 Print ("Number of employees: %d" % Employee.counter)
12
13 def employee_show (self):
14 Print ("Name: ", self.name, ", Salary: ", self.salary)



This is a class! If you look at your code, you'll notice that it's not that different from other languages. Basically, the structure is very similar to any other object-oriented language.

To make it easier to understand, let's explain the class line by line:
Line 1
Class definition and its name (Employee). Don't forget to put a colon (“:”) after this nomenclature.


Line 2
Brief description of the class. Note that it is NOT a comment, but a string that is part of the class's documentation.


Line 3
Creation of a class variable – called, here, counter. The definition of variables is done according to the rules of the language. Remember that a class variable is different from an instance variable.


Line 4
Management control activities.
Impact by management changes.


Lines 5 to 8
Definition of the constructor method. Note its specific name: “__init__()”. When Python finds this method, it treats it as the class's constructor. Inside it, we define the instance variables of the class.


Lines 10 to 13
The other methods of the class are created like normal functions, with the exception that the first argument to each method is self. Python puts self on the list for you, but it doesn't need to be referenced when calling methods.

Exercise

Now that you've learned about classes in Python, create a class that represents a Cartesian point with X and Y coordinates. The coordinates should be part of the constructor. Create a sentence to represent and document the class.

point class:
        ‘Class for representing and manipulating X and Y coordinates’

        def __init__(self,_x,_y):
            self.x = _x
            self.y = _y

Python Objects

Now that we've created the classes, it's time to instantiate the objects.

Let's use the Employee class as a base:


>>> emp1 = Employee("Fabiano",1000)
>>> emp2 = Employee("João Neves", 1500)



Here, we don't need to declare the object before and then instantiate it with “new” or another command like in other languages. In Python, we carry out the process directly.


Since we create a constructor for the class, it is invoked when we create objects of the referenced class.



Note that we don't pass the self as a parameter, but the name and salary in the same order as they are defined in the constructor method signature.

Let's go back to the previous exercise. Remember the class you created to represent a Cartesian dot? Now add two more points.

p ➜ with coordinates 2 and 3;
q ➜ with coordinates 3 and 2.




>>> p=Point(2,3)
>>> q=Point(3,2)            

Now, let's look at one more example:


THEN LET'S ACCESS THE CLASS ELEMENTS
>>> emp1.show_employee()
Name: Fabiano, Salary: 1000
>>> emp2.show_employee()
Name: João Neves, Salary: 1500

WE MAY EVEN INCLUDE, REMOVE OR MODIFY CLASS AND OBJECT ATTRIBUTES AT ANY TIME
>>> emp1.ity = 44

PLEASE NOTE THAT WE CREATED A NEW INSTANCE VARIABLE IN THE EMPLOYEE CLASS
>>> print("Name: ",emp1.name," - Salary: ",emp1.salary," - Age: ",emp1.age)
Name: Fabiano - Salary: 1000 - Age: 44

ALREADY FOR THE EMP2 OBJECT, WE HAVE...
>>> print("Name: ",emp2.name," - Salary:",emp2.salary," - Age:",emp2.age)
Traceback (most recent call last):
        File "", line 1, in
            print("Name: ",emp2.name," - Salary:",emp2.salary," - Age:",emp2.age)
AttributeError: 'Employee' object has no attribute 'age'

In the case of emp2 there is an error. Did you manage to notice?
Identify it and explain how we can fix it.



Here, we do not set the age attribute value for the emp2 object. To fix this, just add a value to this attribute, as was done for the emp1 object.

If it is necessary to delete the age attribute, we can do:

>>> of emp1.ity

Instead of using the normal instructions to access attributes, you can also apply the following functions:

getattr (object, name [, default])

To access the object attribute


hasattr (object, name)

To check whether there is an attribute or not


setattr (object, name, value)

To define an attribute (if it doesn't exist, it will be created)


delattr (object, name)

To delete an attribute

Heads up
As we suggested in previous lessons, redo the examples presented here. Run, make mistakes, find your mistakes and try to fix them. Practice is essential in learning a new programming language.

Exercise

To finish this class, let's practice with one more exercise.

Create one method to return the X coordinate value and another to return the Y coordinate value.

def getX(self):
        return self.x
def getY(self):
        return self.y


------- no commit 

pt-5

Introduction
In the previous class, we dealt with some subjects about object orientation. One of his greatest contributions to the programming language is code reuse – our object of study for this class.

Here, we'll explore other pillars of object orientation and see, in practice, the ease of developing code using this paradigm. One of those pillars is inheritance: a very important mechanism in any language. In Python, it's pretty simple to apply this concept.

Furthermore, we are going to work with polymorphism and understand how it occurs in this language. The idea is to always study through examples. Again, we stress the importance of practicing them to reinforce learning.

Come on?
python inheritance

The inheritance mechanism is one of the main features for code reuse. To get to know it, look at the figure below:

contact 
name 
email 

order 
supplier ()

friend
telephone()

Here, there is a classic representation of inheritance, where Provider is a Contact type, just like Friend.

All characteristics of a Contact (superclass or parent class), which involve attributes and methods, are reflected in its children (Supplier and Friend) or subclasses, which can add specific aspects to each one.


In Python, every class we create is automatically a subclass of an object, in which some attributes and methods that are invisible to us but very useful are defined – like, for example, the constructor.

In addition to methods, there are other class attributes, such as:


&__dict__ Dictionary containing the namespace of the class;
__doc__ Class documentation string or none (if undefined);
__name__ Name of the class;
__module__ Name of the module in which the class is defined (in interactive mode, this attribute is “__main__”;
__bases__ Possibly empty tuple that contains the base classes in the order of their occurrence and in the corresponding list.

Tip
We still haven't studied some concepts shown in this list, such as tuples, dictionary etc. We'll cover them in a class after this one.


If we create a class and we don't mention that we are inheriting it from another, it will automatically inherit from object. Like the following example:


class MyClass(object):
code...



At last, we created a heritage!

Now, let's get a little more practical. In Python, the simplest and most obvious way to create inheritance in a class is to add functionality to it.

To illustrate, suppose there is a class called Contact. Watch:


1 class Contact:
2 all_contacts = []
3 def __init__ (self, name, email):
4 self.name = name
5 self.email = email
6 Contact.all_contacts.append (self)



This class stores a list of contacts in a variable called all_contacts.

As you've noticed, the square brackets (“[ ]”) are for defining a vector, shown in line 2. This is a class variable, and its value is shared with all instantiated objects.

In other words, in this example there is only one list called all_contacts. When we allude to it in some object created of that class, we will only be referring to it.

Furthermore, in the constructor (line 6), there is a command so that, every time an object is instantiated, the list is modified by adding a contact.


But the class was created for us to manage a list of contacts – including suppliers, for example. If the contact is a supplier, the idea is that it can store purchase order information. How to do this?
The representation will be this:

supplier ------ contact
order ()          name email 

Let's then develop the code in Python. We just need to define the request() method. Look:


1 class Supplier (Contact):
2 def order (self, order)
3 print ("request {} made by {}", format (request,self.name))


Now is the time to take a test. Follow the sequence of commands to understand the example:


1 # we create 2 objects: c and f
2 >>>c=Contact("So and so","so and so@contato.com")
3 >>>f = Supplier("Supplier X","Supplier@supplier.com")
4
5 # Let's see the values ​​entered
6 print(c.name,c.email,f.name,f.email)
7 def employee_show(self):
8 print("Name : ", self.name, ", Salary: ", self.salary) So-and-so@contato.com Vendor X vendor@supplies.com


Let's check the contacts stored in the Contacts list of the Contact class.
Remember that objects are references. Therefore, the "print" will show the reference value:


1 >>>c.todos_contacts
2 [<__main__.Contact object at 0x0000000002F713C8>,
3 <__main__.Supplier object at 0x0000000002FD8B70>]


Let's generate an error. The request() method is not defined in the Contact class. Therefore, object c does not understand the method call:


1 >>> order("Ped0001")
2 Traceback (most recent call last):
3 File "", line 1, in
4 c.order("Ped0001")
5 AttributeError: 'Contact' object has no attribute 'request'
6 # Let's now test the request() method on the object of the correct class
7 >>> f.order("Ped0001")
8 Order Ped0001 made by Supplier X

Tip
As we analyze the codes, we are learning new functions and new commands. In the previous example, we used the format() method, which allows us to replace variables, format values, and consequently concatenate elements within a string by positional formatting.


Did you notice that we applied inheritance in this example? Everything the Contact class does, the Supplier will also do, besides including a method for placing orders, which is very simplified in this code. Note, too, that we use the Contacts list of the Contact class.

Exercise

Consider the following figure:

employee: 
director
teacher 
administrative 

Now, review the sentences:

I. Employee is the superclass.
II. Director and Teacher are derived classes.
III. Employee extends Administrative.

Among the above items are CORRECT: I and II

Overload and super method

In the Supplier class, we add a request() method to specialize the Contact class.

Now, we want to do something different: the Contact class only allows one name and one email address. But what if we needed to add a phone number for a contact?


0
JACKET

If you paid attention in the previous class, you will certainly know how to solve the problem, adding a “phone” attribute to the newly created object. This is an overload (override) on the __init__ method.

Let's practice in Python. See how simple it is:

class Friend(Contact):
    def __init__(self,name,email,phone):
       self.name = name
       self.email = email
       self.phone = phone


Any method can be overloaded. In this case, we only did it in __init__. But it didn't turn out very well, as there is duplicate code in the superclass (Contact) and in the subclass (Friend).

If we run this code in the Friend class, we will break some rules and not add friends to the contact list, which cannot happen.


In other languages, when a subclass has a new instance, it can call the superclass's constructor first, and then the subclass's constructor. In Python, this is also possible from the super() method.



So we need to modify the Amigo class code to:


1 class Friend (Contact):
2 def __init__ (self, name, email, phone):
3 super(). __init__ (name, email)
4 self.phone = phone


Note that, in the constructor, there is now a call to a superclass method (__init__) passing in the required parameters. Then, to finish instantiating the object, we add the value to the phone attribute.

In this example, we overload the superclass method in the constructor.

Heads up

The call to the superclass method can be made anywhere in the code, not necessarily on the first line, as we saw here.


In this way, we create the code that implements the initial class diagram:

contact: name email 

order supplier()

friend telephone

Polymorphism

As with inheritance, another pillar concept of object orientation is (= “multiple forms”), whose different methods have the same name but perform different functions.

Let's show how it works with a classic example: a music player like MusicBee, MediaMonkey, VLC etc. Once installed, they can play a very wide variety of files (MP3, WMA etc.).

If you were to develop such software, you would have to implement a method to play each of the different formats. Basically, it's more a matter of software architecture than technology.

We could have a class called AudioFile and a tap() method to perform the action. For the music to actually play, the method call would be this:


audio_file.play()



But, as we've already mentioned, each format has a different way of recognizing the file, decompressing it, and reading the data. In this case, to simplify the architecture, you can use inheritance with polymorphism.

Each file type can be represented by a subclass of AudioFile, such as one class for MP3 (MP3 File), one for Wav (Wav File) and so on. As already mentioned, all of them must have the touch() method, but implemented in a different way.

The interesting thing is that the superclass's audio_file object doesn't need to know which class the method is being used on, but simply executes the touch() method.

We'll see how to do this in Python. Here, we create four classes: the superclassAudioFile and its subclassesMPFile3,WavFile, andOggFile.

AUDIO FILE
class AudioFile:
       def __init__(self,file):
          if not file.endswith(self.ext):
              raise Exception("Invalid format!")

FILEMP3
class MP3File(Audio File):
       ext="mp3"
       def touch(self):
              print("Playing {} as MP3".format(self.file))

WAV FILE
classWavFile(AudioFile):
       ext="wav"
       def touch(self):
              print("Playing {} as WAV".format(self.file))

OGG FILE
class OggFile(Audio File):
       ext="ogg"
       def touch(self):
              print("Playing {} as OGG".format(self.file))

The polymorphism enters at this point: the superclass constructor checks the value of the ext variable present in the subclasses. If it is outside the preset formats (MP3, Wav or Ogg), it will generate an error message.

The advantage is that the superclass does not hold a reference to the ext variable, but accesses the values ​​held by each of its subclasses.

You may have noticed that each subclass implements a touch() method. While this is pretty clear from this example, in the real world there would be different algorithms running on each one.

Again, polymorphism kicks in: the player can use the same method call for files of different formats, regardless of their type.

Let's do a test:


1 >>> ogg = FileOGG("music.ogg")
2 >>> mp3 = FileMP3("music.mp3")
3 >>> wav = WAVFile("music.wav")
4 >>> ogg.touch()
5 Playing musica.ogg as ogg
6 >>> wav.play()
7 Playing music.wav as wav
8 >>> mp3.tocar()
9 Playing music.mp3 as mp3
10 >>> test_ogg = MP3File("outramusica.ogg")
11 Traceback (most recent call last):
12 File "", line 1, in
13 test_ogg = MP3File("outramusica.ogg")
14 File "", line 4, in __init__
15 raise Exception("Invalid format")
16 Exception: Invalid format



In this case, three objects were created: Ogg, MP3 and Wav. Next, we test the touch() method.

Did you notice that the superclass kicks in, assigns the parameter's value on object creation to the file variable, and then tests its extension? Soon after, it calls the corresponding subclass and “plays”, that is, it executes the touch() method.

The use of polymorphism is very similar in other languages, but there is an important detail here about Python: it uses what we call duck typing.

For a better understanding, let's look at an example where we'll create a class to play AAC format files. Note that it also has the tap() method:

1 class AAC File:
2 def __init__(self, file):
3 if not file.endswith (“.aac”):
4 raise Exception (“Invalid format”)
5 self.file = file
6 def touch (self)
7 print (“Playing {} as aac”.format (self.file))



Let's go to the test:


1 >>> aac = AAC File("music.aac")
2 >>> atouch()
3 Playing musica.aac as aac



Now, our player can play music in AAC format and with a detail: we don't inherit from the AudioFile class. Here again is a language feature that can be used depending on how you solve your problem.

But this question of software architecture leads us to further discussions that go beyond our context. For now, the concepts of inheritance, overload and polymorphism are enough for your learning.

Again, we recommend that you redo the examples and test them on your machine. If you find it necessary, make some modifications as per your curiosity.

Activities
Implement the following diagram in Python:

person, name age 
getAge 

PhysichalPerson 
individual registration 

Legal Person 
legal entity registration

class Person:
       def __init__(self, name ='', age=0):
              self.name = name
              self.age = age
       def getAge(self):
              return self.age

class Individual(Person):
       def __init__(self, CPF, name='', age=0):
              Person.__init__(self, name, age)
              self.CPF = CPF

class LegalPerson(Person):
       def __init__(self, CNPJ, name='', age=0):
              Person.__init__(self, name, age)
              self.CNPJ = CNPJ

create a IndividualPerson and LegalPerson: 

a = Person()
Person.__init__(a, 'So and so', 45)

b = Individual('111.222.333-4', name='', age=0)
bank = Legal Person('11.222.333/0001-44', name='Bank X', age=100)

What is needed to create a new class instance?


a) An object.


b) A class.


c) A builder. TRUE 


d) Any method.


e) A method that returns a value.

Review the following code:

sales class:
       def __init__(self, id):
              self.id = id
              id = 100

val = Sales(123)
print (val.id)

What is imprinted on it?


a) Id


b) 100


c) 123   TRUE 


d) error   


e) N.R.A.
